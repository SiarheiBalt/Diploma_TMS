{"ast":null,"code":"import { takeEvery, call, put, actionChannel } from \"redux-saga/effects\";\nimport { ACTIONS } from \"./constans\";\nimport { addElDatabase, checkOutOf, getDatabase, initializeAuthAdmin, readDatabase, removeItemDatabase, signOutAdmin, createUser, sendSignInLinkToEmail, singInAfterGetMail, delleteUser } from \"../fireBaseFunctions\";\n\nfunction* getCostSaga(action) {\n  try {\n    yield put({\n      type: ACTIONS.GET_DATA_USERS_COST,\n      costData: action.costData\n    });\n    const paymentCostDb = yield call(() => getDatabase(\"groupCost\"));\n    yield put({\n      type: ACTIONS.GET_DATA_DB_COST,\n      paymentCostDb\n    });\n    yield put({\n      type: ACTIONS.SET_BAND_COST\n    });\n  } catch (er) {}\n}\n\nexport function* costSaga() {\n  yield takeEvery(ACTIONS.PAYMENT_BAND_COST, getCostSaga);\n}\n\nfunction* getPostersSaga() {\n  try {\n    const posters = yield call(() => readDatabase(\"posters\"));\n    yield put({\n      type: ACTIONS.GET_POSTERS_DB_SUCCES,\n      posters: posters\n    });\n  } catch (er) {}\n}\n\nexport function* postersSaga() {\n  yield takeEvery(ACTIONS.GET_POSTERS_DB, getPostersSaga);\n}\n\nfunction* pushPoster(action) {\n  try {\n    yield call(() => addElDatabase(action.text, \"posters\"));\n  } catch (er) {}\n}\n\nexport function* pushPosterSaga() {\n  yield takeEvery(ACTIONS.PUSH_POSTER, pushPoster);\n}\n\nfunction* removePoster(action) {\n  try {\n    yield call(() => removeItemDatabase(action.id, \"posters\"));\n    yield put({\n      type: ACTIONS.GET_POSTERS_DB\n    });\n  } catch (er) {}\n}\n\nexport function* removePosterSaga() {\n  yield takeEvery(ACTIONS.REMOVE_POSTER, removePoster);\n}\n\nfunction* checkAdminLogin(action) {\n  try {\n    const responseAuthUid = yield call(() => initializeAuthAdmin(action.login, action.password));\n    yield put({\n      type: ACTIONS.CHECK_LOGIN_PASSWORD_ADMIN_CUCCES,\n      responseAuthUid\n    });\n  } catch (er) {}\n}\n\nexport function* checkAdminLoginSaga() {\n  yield takeEvery(ACTIONS.CHECK_LOGIN_PASSWORD_ADMIN, checkAdminLogin);\n}\n\nfunction* getOutAdmin() {\n  try {\n    yield call(() => signOutAdmin());\n    yield put({\n      type: ACTIONS.SIGN_OUT_ADMIN_SUCCES\n    });\n    yield call(() => checkOutOf());\n  } catch (er) {\n    console.log(er);\n  }\n}\n\nexport function* getOutAdminSaga() {\n  yield takeEvery(ACTIONS.SIGN_OUT_ADMIN, getOutAdmin);\n}\n\nfunction* getSongList() {\n  try {\n    const response = yield call(() => getDatabase(\"songList\"));\n    yield put({\n      type: ACTIONS.GET_DATA_DB_SONGS_SUCCES,\n      songs: response\n    });\n  } catch (er) {\n    console.log(er);\n  }\n}\n\nexport function* getSongListSaga() {\n  yield takeEvery(ACTIONS.GET_DATA_DB_SONGS, getSongList);\n}\n\nfunction* pushSong(action) {\n  try {\n    yield call(() => addElDatabase(action.song.song, `songList/${action.song.selected}`));\n  } catch (er) {\n    console.log(er);\n  }\n}\n\nexport function* pushSongSaga() {\n  yield takeEvery(ACTIONS.PUSH_SONG, pushSong);\n}\n\nfunction* removeSong(actions) {\n  console.log(`songList/${actions.song.type}`);\n\n  try {\n    yield call(() => removeItemDatabase(actions.song.songId, `songList/${actions.song.type}`));\n    yield put({\n      type: ACTIONS.GET_DATA_DB_SONGS\n    });\n  } catch (er) {\n    console.log(er);\n  }\n}\n\nexport function* removeSongSaga() {\n  yield takeEvery(ACTIONS.REMOVE_SONG, removeSong);\n}\n\nfunction* getReviews() {\n  const reviewes = yield call(() => getDatabase(\"reviewes\"));\n  yield put({\n    type: ACTIONS.GET_REVIEWS_SUCCES,\n    reviewes\n  });\n}\n\nexport function* getReviewsSaga() {\n  yield takeEvery(ACTIONS.GET_REVIEWS, getReviews);\n}\n\nfunction* sendMailAndCreateUser(action) {\n  yield call(() => createUser(action.email, \"123456\"));\n  yield call(() => sendSignInLinkToEmail(action.email));\n}\n\nexport function* sendMailAndCreateUserSaga() {\n  yield takeEvery(ACTIONS.SEND_EMAIL, sendMailAndCreateUser);\n}\n\nfunction* sendReviewe(action) {\n  let obj = yield {\n    name: action.name,\n    text: action.text,\n    time: action.date\n  };\n  yield call(() => addElDatabase(obj, \"reviewes\"));\n  yield call(() => delleteUser());\n  yield put({\n    type: ACTIONS.REVIEWE_NOTALLOWED_ACCES\n  });\n}\n\nexport function* sendRevieweSaga() {\n  yield takeEvery(ACTIONS.SEND_REVIEWE, sendReviewe);\n}\n\nfunction* signInUser() {\n  yield call(() => singInAfterGetMail());\n  const checkUser = yield call(() => checkOutOf());\n  yield checkUser === \"user out\" ? put({\n    type: ACTIONS.REVIEWE_NOTALLOWED_ACCES\n  }) : put({\n    type: ACTIONS.REVIEWE_ACCES\n  });\n}\n\nexport function* signInUserSaga() {\n  yield takeEvery(ACTIONS.SIGN_USER, signInUser);\n}","map":{"version":3,"sources":["D:/GIT/Diploma_TMS/src/redux/reducers/sagas.js"],"names":["takeEvery","call","put","actionChannel","ACTIONS","addElDatabase","checkOutOf","getDatabase","initializeAuthAdmin","readDatabase","removeItemDatabase","signOutAdmin","createUser","sendSignInLinkToEmail","singInAfterGetMail","delleteUser","getCostSaga","action","type","GET_DATA_USERS_COST","costData","paymentCostDb","GET_DATA_DB_COST","SET_BAND_COST","er","costSaga","PAYMENT_BAND_COST","getPostersSaga","posters","GET_POSTERS_DB_SUCCES","postersSaga","GET_POSTERS_DB","pushPoster","text","pushPosterSaga","PUSH_POSTER","removePoster","id","removePosterSaga","REMOVE_POSTER","checkAdminLogin","responseAuthUid","login","password","CHECK_LOGIN_PASSWORD_ADMIN_CUCCES","checkAdminLoginSaga","CHECK_LOGIN_PASSWORD_ADMIN","getOutAdmin","SIGN_OUT_ADMIN_SUCCES","console","log","getOutAdminSaga","SIGN_OUT_ADMIN","getSongList","response","GET_DATA_DB_SONGS_SUCCES","songs","getSongListSaga","GET_DATA_DB_SONGS","pushSong","song","selected","pushSongSaga","PUSH_SONG","removeSong","actions","songId","removeSongSaga","REMOVE_SONG","getReviews","reviewes","GET_REVIEWS_SUCCES","getReviewsSaga","GET_REVIEWS","sendMailAndCreateUser","email","sendMailAndCreateUserSaga","SEND_EMAIL","sendReviewe","obj","name","time","date","REVIEWE_NOTALLOWED_ACCES","sendRevieweSaga","SEND_REVIEWE","signInUser","checkUser","REVIEWE_ACCES","signInUserSaga","SIGN_USER"],"mappings":"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","sourcesContent":["import { takeEvery, call, put, actionChannel } from \"redux-saga/effects\";\nimport { ACTIONS } from \"./constans\";\nimport {\n  addElDatabase,\n  checkOutOf,\n  getDatabase,\n  initializeAuthAdmin,\n  readDatabase,\n  removeItemDatabase,\n  signOutAdmin,\n  createUser,\n  sendSignInLinkToEmail,\n  singInAfterGetMail,\n  delleteUser,\n} from \"../fireBaseFunctions\";\n\nfunction* getCostSaga(action) {\n  try {\n    yield put({ type: ACTIONS.GET_DATA_USERS_COST, costData: action.costData });\n    const paymentCostDb = yield call(() => getDatabase(\"groupCost\"));\n    yield put({ type: ACTIONS.GET_DATA_DB_COST, paymentCostDb });\n    yield put({ type: ACTIONS.SET_BAND_COST });\n  } catch (er) {}\n}\nexport function* costSaga() {\n  yield takeEvery(ACTIONS.PAYMENT_BAND_COST, getCostSaga);\n}\n\nfunction* getPostersSaga() {\n  try {\n    const posters = yield call(() => readDatabase(\"posters\"));\n    yield put({ type: ACTIONS.GET_POSTERS_DB_SUCCES, posters: posters });\n  } catch (er) {}\n}\nexport function* postersSaga() {\n  yield takeEvery(ACTIONS.GET_POSTERS_DB, getPostersSaga);\n}\n\nfunction* pushPoster(action) {\n  try {\n    yield call(() => addElDatabase(action.text, \"posters\"));\n  } catch (er) {}\n}\nexport function* pushPosterSaga() {\n  yield takeEvery(ACTIONS.PUSH_POSTER, pushPoster);\n}\n\nfunction* removePoster(action) {\n  try {\n    yield call(() => removeItemDatabase(action.id, \"posters\"));\n    yield put({ type: ACTIONS.GET_POSTERS_DB });\n  } catch (er) {}\n}\nexport function* removePosterSaga() {\n  yield takeEvery(ACTIONS.REMOVE_POSTER, removePoster);\n}\n\nfunction* checkAdminLogin(action) {\n  try {\n    const responseAuthUid = yield call(() =>\n      initializeAuthAdmin(action.login, action.password)\n    );\n    yield put({\n      type: ACTIONS.CHECK_LOGIN_PASSWORD_ADMIN_CUCCES,\n      responseAuthUid,\n    });\n  } catch (er) {}\n}\nexport function* checkAdminLoginSaga() {\n  yield takeEvery(ACTIONS.CHECK_LOGIN_PASSWORD_ADMIN, checkAdminLogin);\n}\n\nfunction* getOutAdmin() {\n  try {\n    yield call(() => signOutAdmin());\n    yield put({ type: ACTIONS.SIGN_OUT_ADMIN_SUCCES });\n    yield call(() => checkOutOf());\n  } catch (er) {\n    console.log(er);\n  }\n}\nexport function* getOutAdminSaga() {\n  yield takeEvery(ACTIONS.SIGN_OUT_ADMIN, getOutAdmin);\n}\n\nfunction* getSongList() {\n  try {\n    const response = yield call(() => getDatabase(\"songList\"));\n    yield put({ type: ACTIONS.GET_DATA_DB_SONGS_SUCCES, songs: response });\n  } catch (er) {\n    console.log(er);\n  }\n}\nexport function* getSongListSaga() {\n  yield takeEvery(ACTIONS.GET_DATA_DB_SONGS, getSongList);\n}\n\nfunction* pushSong(action) {\n  try {\n    yield call(() =>\n      addElDatabase(action.song.song, `songList/${action.song.selected}`)\n    );\n  } catch (er) {\n    console.log(er);\n  }\n}\nexport function* pushSongSaga() {\n  yield takeEvery(ACTIONS.PUSH_SONG, pushSong);\n}\n\nfunction* removeSong(actions) {\n  console.log(`songList/${actions.song.type}`);\n  try {\n    yield call(() =>\n      removeItemDatabase(actions.song.songId, `songList/${actions.song.type}`)\n    );\n    yield put({ type: ACTIONS.GET_DATA_DB_SONGS });\n  } catch (er) {\n    console.log(er);\n  }\n}\nexport function* removeSongSaga() {\n  yield takeEvery(ACTIONS.REMOVE_SONG, removeSong);\n}\n\nfunction* getReviews() {\n  const reviewes = yield call(() => getDatabase(\"reviewes\"));\n  yield put({ type: ACTIONS.GET_REVIEWS_SUCCES, reviewes });\n}\nexport function* getReviewsSaga() {\n  yield takeEvery(ACTIONS.GET_REVIEWS, getReviews);\n}\n\nfunction* sendMailAndCreateUser(action) {\n  yield call(() => createUser(action.email, \"123456\"));\n  yield call(() => sendSignInLinkToEmail(action.email));\n}\nexport function* sendMailAndCreateUserSaga() {\n  yield takeEvery(ACTIONS.SEND_EMAIL, sendMailAndCreateUser);\n}\n\nfunction* sendReviewe(action) {\n  let obj = yield { name: action.name, text: action.text, time: action.date };\n  yield call(() => addElDatabase(obj, \"reviewes\"));\n  yield call(() => delleteUser());\n  yield put({ type: ACTIONS.REVIEWE_NOTALLOWED_ACCES });\n}\nexport function* sendRevieweSaga() {\n  yield takeEvery(ACTIONS.SEND_REVIEWE, sendReviewe);\n}\n\nfunction* signInUser() {\n  yield call(() => singInAfterGetMail());\n  const checkUser = yield call(() => checkOutOf());\n  yield checkUser === \"user out\"\n    ? put({ type: ACTIONS.REVIEWE_NOTALLOWED_ACCES })\n    : put({ type: ACTIONS.REVIEWE_ACCES });\n}\nexport function* signInUserSaga() {\n  yield takeEvery(ACTIONS.SIGN_USER, signInUser);\n}\n"]},"metadata":{},"sourceType":"module"}